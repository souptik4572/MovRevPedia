/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    message?: string | null; // String
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  MovieReview: { // root type
    id: string; // String!
    name: string; // String!
    rating: number; // Int!
    review: string; // String!
  }
  MovieReviewFeed: { // root type
    message?: string | null; // String
    movieReviews: NexusGenRootTypes['MovieReview'][]; // [MovieReview!]!
    reviewCount: number; // Int!
  }
  MovieReviewResponseType: { // root type
    message: string; // String!
    movie: NexusGenRootTypes['MovieReview']; // MovieReview!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // String!
    name: string; // String!
  }
  Vote: { // root type
    movieReview: NexusGenRootTypes['MovieReview']; // MovieReview!
    user: NexusGenRootTypes['User']; // User!
  }
  VoteMessage: { // root type
    message?: string | null; // String
    vote: NexusGenRootTypes['Vote']; // Vote!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    message: string | null; // String
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  MovieReview: { // field return type
    id: string; // String!
    name: string; // String!
    rating: number; // Int!
    review: string; // String!
    reviewedBy: NexusGenRootTypes['User'] | null; // User
  }
  MovieReviewFeed: { // field return type
    message: string | null; // String
    movieReviews: NexusGenRootTypes['MovieReview'][]; // [MovieReview!]!
    reviewCount: number; // Int!
  }
  MovieReviewResponseType: { // field return type
    message: string; // String!
    movie: NexusGenRootTypes['MovieReview']; // MovieReview!
  }
  Mutation: { // field return type
    createMovieReview: NexusGenRootTypes['MovieReviewResponseType']; // MovieReviewResponseType!
    deleteMovieReview: NexusGenRootTypes['MovieReviewResponseType']; // MovieReviewResponseType!
    editMovieReview: NexusGenRootTypes['MovieReviewResponseType']; // MovieReviewResponseType!
    loginUser: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    registerUser: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    upVoteMovieReview: NexusGenRootTypes['Vote'] | null; // Vote
  }
  Query: { // field return type
    getAllMovieReviews: NexusGenRootTypes['MovieReviewFeed'] | null; // MovieReviewFeed
    getUserProfile: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    downVotes: NexusGenRootTypes['Vote'][]; // [Vote!]!
    email: string; // String!
    id: string; // String!
    movieReviews: NexusGenRootTypes['MovieReview'][]; // [MovieReview!]!
    name: string; // String!
    upVotes: NexusGenRootTypes['Vote'][]; // [Vote!]!
  }
  Vote: { // field return type
    movieReview: NexusGenRootTypes['MovieReview']; // MovieReview!
    user: NexusGenRootTypes['User']; // User!
  }
  VoteMessage: { // field return type
    message: string | null; // String
    vote: NexusGenRootTypes['Vote']; // Vote!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    message: 'String'
    token: 'String'
    user: 'User'
  }
  MovieReview: { // field return type name
    id: 'String'
    name: 'String'
    rating: 'Int'
    review: 'String'
    reviewedBy: 'User'
  }
  MovieReviewFeed: { // field return type name
    message: 'String'
    movieReviews: 'MovieReview'
    reviewCount: 'Int'
  }
  MovieReviewResponseType: { // field return type name
    message: 'String'
    movie: 'MovieReview'
  }
  Mutation: { // field return type name
    createMovieReview: 'MovieReviewResponseType'
    deleteMovieReview: 'MovieReviewResponseType'
    editMovieReview: 'MovieReviewResponseType'
    loginUser: 'AuthPayload'
    registerUser: 'AuthPayload'
    upVoteMovieReview: 'Vote'
  }
  Query: { // field return type name
    getAllMovieReviews: 'MovieReviewFeed'
    getUserProfile: 'User'
  }
  User: { // field return type name
    downVotes: 'Vote'
    email: 'String'
    id: 'String'
    movieReviews: 'MovieReview'
    name: 'String'
    upVotes: 'Vote'
  }
  Vote: { // field return type name
    movieReview: 'MovieReview'
    user: 'User'
  }
  VoteMessage: { // field return type name
    message: 'String'
    vote: 'Vote'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createMovieReview: { // args
      name: string; // String!
      rating: number; // Int!
      review: string; // String!
    }
    deleteMovieReview: { // args
      id: string; // String!
    }
    editMovieReview: { // args
      id: string; // String!
      name?: string | null; // String
      rating?: number | null; // Int
      review?: string | null; // String
    }
    loginUser: { // args
      email: string; // String!
      password: string; // String!
    }
    registerUser: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
    upVoteMovieReview: { // args
      movieReviewId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}